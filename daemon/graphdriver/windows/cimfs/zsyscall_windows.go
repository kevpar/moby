// Code generated by 'go generate'; DO NOT EDIT.

package cimfs

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return nil
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modcomputestorage = windows.NewLazySystemDLL("computestorage.dll")
	modVirtDisk       = windows.NewLazySystemDLL("VirtDisk.dll")

	procHcsFormatWritableLayerVhd = modcomputestorage.NewProc("HcsFormatWritableLayerVhd")
	procHcsGetLayerVhdMountPath   = modcomputestorage.NewProc("HcsGetLayerVhdMountPath")
	procAttachVirtualDisk         = modVirtDisk.NewProc("AttachVirtualDisk")
)

func hcsFormatWritableLayerVhd(handle uintptr) (hr error) {
	r0, _, _ := syscall.Syscall(procHcsFormatWritableLayerVhd.Addr(), 1, uintptr(handle), 0, 0)
	if r0 != 0 {
		hr = syscall.Errno(r0)
	}
	return
}

func hcsGetLayerVhdMountPath(handle uintptr, mountPath **uint16) (hr error) {
	r0, _, _ := syscall.Syscall(procHcsGetLayerVhdMountPath.Addr(), 2, uintptr(handle), uintptr(unsafe.Pointer(mountPath)), 0)
	if r0 != 0 {
		hr = syscall.Errno(r0)
	}
	return
}

func attachVirtualDisk(handle syscall.Handle, secDesc uintptr, flags uint32, providerFlags uint32, parameters *attachVirtualDiskParameters, overlapped uintptr) (err error) {
	r1, _, e1 := syscall.Syscall6(procAttachVirtualDisk.Addr(), 6, uintptr(handle), uintptr(secDesc), uintptr(flags), uintptr(providerFlags), uintptr(unsafe.Pointer(parameters)), uintptr(overlapped))
	if r1 != 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}
